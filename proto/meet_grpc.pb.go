// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/meet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeetServiceClient is the client API for MeetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetServiceClient interface {
	// 4 types of rpc calls
	SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (MeetService_SayHelloServerStreamingClient, error)
	SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (MeetService_SayHelloClientStreamingClient, error)
	SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (MeetService_SayHelloBidirectionalStreamingClient, error)
}

type meetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetServiceClient(cc grpc.ClientConnInterface) MeetServiceClient {
	return &meetServiceClient{cc}
}

func (c *meetServiceClient) SayHello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/meet_service.MeetService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetServiceClient) SayHelloServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (MeetService_SayHelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeetService_ServiceDesc.Streams[0], "/meet_service.MeetService/SayHelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &meetServiceSayHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeetService_SayHelloServerStreamingClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type meetServiceSayHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *meetServiceSayHelloServerStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meetServiceClient) SayHelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (MeetService_SayHelloClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeetService_ServiceDesc.Streams[1], "/meet_service.MeetService/SayHelloClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &meetServiceSayHelloClientStreamingClient{stream}
	return x, nil
}

type MeetService_SayHelloClientStreamingClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*MessageList, error)
	grpc.ClientStream
}

type meetServiceSayHelloClientStreamingClient struct {
	grpc.ClientStream
}

func (x *meetServiceSayHelloClientStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *meetServiceSayHelloClientStreamingClient) CloseAndRecv() (*MessageList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meetServiceClient) SayHelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (MeetService_SayHelloBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeetService_ServiceDesc.Streams[2], "/meet_service.MeetService/SayHelloBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &meetServiceSayHelloBidirectionalStreamingClient{stream}
	return x, nil
}

type MeetService_SayHelloBidirectionalStreamingClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type meetServiceSayHelloBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *meetServiceSayHelloBidirectionalStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *meetServiceSayHelloBidirectionalStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MeetServiceServer is the server API for MeetService service.
// All implementations must embed UnimplementedMeetServiceServer
// for forward compatibility
type MeetServiceServer interface {
	// 4 types of rpc calls
	SayHello(context.Context, *NoParam) (*HelloResponse, error)
	SayHelloServerStreaming(*NamesList, MeetService_SayHelloServerStreamingServer) error
	SayHelloClientStreaming(MeetService_SayHelloClientStreamingServer) error
	SayHelloBidirectionalStreaming(MeetService_SayHelloBidirectionalStreamingServer) error
	mustEmbedUnimplementedMeetServiceServer()
}

// UnimplementedMeetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeetServiceServer struct {
}

func (UnimplementedMeetServiceServer) SayHello(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMeetServiceServer) SayHelloServerStreaming(*NamesList, MeetService_SayHelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedMeetServiceServer) SayHelloClientStreaming(MeetService_SayHelloClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreaming not implemented")
}
func (UnimplementedMeetServiceServer) SayHelloBidirectionalStreaming(MeetService_SayHelloBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStreaming not implemented")
}
func (UnimplementedMeetServiceServer) mustEmbedUnimplementedMeetServiceServer() {}

// UnsafeMeetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetServiceServer will
// result in compilation errors.
type UnsafeMeetServiceServer interface {
	mustEmbedUnimplementedMeetServiceServer()
}

func RegisterMeetServiceServer(s grpc.ServiceRegistrar, srv MeetServiceServer) {
	s.RegisterService(&MeetService_ServiceDesc, srv)
}

func _MeetService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meet_service.MeetService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetServiceServer).SayHello(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeetServiceServer).SayHelloServerStreaming(m, &meetServiceSayHelloServerStreamingServer{stream})
}

type MeetService_SayHelloServerStreamingServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type meetServiceSayHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *meetServiceSayHelloServerStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MeetService_SayHelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeetServiceServer).SayHelloClientStreaming(&meetServiceSayHelloClientStreamingServer{stream})
}

type MeetService_SayHelloClientStreamingServer interface {
	SendAndClose(*MessageList) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type meetServiceSayHelloClientStreamingServer struct {
	grpc.ServerStream
}

func (x *meetServiceSayHelloClientStreamingServer) SendAndClose(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *meetServiceSayHelloClientStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MeetService_SayHelloBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeetServiceServer).SayHelloBidirectionalStreaming(&meetServiceSayHelloBidirectionalStreamingServer{stream})
}

type MeetService_SayHelloBidirectionalStreamingServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type meetServiceSayHelloBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *meetServiceSayHelloBidirectionalStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *meetServiceSayHelloBidirectionalStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MeetService_ServiceDesc is the grpc.ServiceDesc for MeetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meet_service.MeetService",
	HandlerType: (*MeetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MeetService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _MeetService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStreaming",
			Handler:       _MeetService_SayHelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStreaming",
			Handler:       _MeetService_SayHelloBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/meet.proto",
}
